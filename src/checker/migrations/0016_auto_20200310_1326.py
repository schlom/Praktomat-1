# Generated by Django 2.2.10 on 2020-03-10 13:26

import checker.basemodels
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('checker', '0015_javachecker'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='checkerresult',
            options={'verbose_name': 'Checker Result', 'verbose_name_plural': 'Checker Results'},
        ),
        migrations.AlterField(
            model_name='anonymitychecker',
            name='always',
            field=models.BooleanField(default=True, help_text='The test will run on submission time.', verbose_name='Always'),
        ),
        migrations.AlterField(
            model_name='anonymitychecker',
            name='created',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Created'),
        ),
        migrations.AlterField(
            model_name='anonymitychecker',
            name='critical',
            field=models.BooleanField(default=False, help_text='If this test fails, do not display further test results.', verbose_name='Critical'),
        ),
        migrations.AlterField(
            model_name='anonymitychecker',
            name='order',
            field=models.IntegerField(help_text='Determines the order in which the checker will start. Not necessary continuously!', verbose_name='Order'),
        ),
        migrations.AlterField(
            model_name='anonymitychecker',
            name='public',
            field=models.BooleanField(default=True, help_text='Test results are displayed to the submitter.', verbose_name='Public'),
        ),
        migrations.AlterField(
            model_name='anonymitychecker',
            name='required',
            field=models.BooleanField(default=False, help_text='The test must be passed to submit the solution.', verbose_name='Required'),
        ),
        migrations.AlterField(
            model_name='anonymitychecker',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task', verbose_name='Task'),
        ),
        migrations.AlterField(
            model_name='cbuilder',
            name='_file_pattern',
            field=models.CharField(default='^[a-zA-Z0-9_]*$', help_text='Regular expression describing all source files to be passed to the compiler.', max_length=1000, verbose_name='File Pattern'),
        ),
        migrations.AlterField(
            model_name='cbuilder',
            name='_flags',
            field=models.CharField(blank=True, default='-Wall', help_text='Compiler flags', max_length=1000, verbose_name='Flags'),
        ),
        migrations.AlterField(
            model_name='cbuilder',
            name='_libs',
            field=models.CharField(blank=True, default='', help_text='Compiler libraries', max_length=1000, verbose_name='Libs'),
        ),
        migrations.AlterField(
            model_name='cbuilder',
            name='_main_required',
            field=models.BooleanField(default=True, help_text='Is a submission required to provide a main method?', verbose_name='Main required'),
        ),
        migrations.AlterField(
            model_name='cbuilder',
            name='_output_flags',
            field=models.CharField(blank=True, default='-o %s', help_text="Output flags. '%s' will be replaced by the program name.", max_length=1000, verbose_name='Output Flags'),
        ),
        migrations.AlterField(
            model_name='cbuilder',
            name='always',
            field=models.BooleanField(default=True, help_text='The test will run on submission time.', verbose_name='Always'),
        ),
        migrations.AlterField(
            model_name='cbuilder',
            name='created',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Created'),
        ),
        migrations.AlterField(
            model_name='cbuilder',
            name='critical',
            field=models.BooleanField(default=False, help_text='If this test fails, do not display further test results.', verbose_name='Critical'),
        ),
        migrations.AlterField(
            model_name='cbuilder',
            name='order',
            field=models.IntegerField(help_text='Determines the order in which the checker will start. Not necessary continuously!', verbose_name='Order'),
        ),
        migrations.AlterField(
            model_name='cbuilder',
            name='public',
            field=models.BooleanField(default=True, help_text='Test results are displayed to the submitter.', verbose_name='Public'),
        ),
        migrations.AlterField(
            model_name='cbuilder',
            name='required',
            field=models.BooleanField(default=False, help_text='The test must be passed to submit the solution.', verbose_name='Required'),
        ),
        migrations.AlterField(
            model_name='cbuilder',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task', verbose_name='Task'),
        ),
        migrations.AlterField(
            model_name='checkerresult',
            name='content_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType', verbose_name='Content type'),
        ),
        migrations.AlterField(
            model_name='checkerresult',
            name='creation_date',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Creation Date'),
        ),
        migrations.AlterField(
            model_name='checkerresult',
            name='log',
            field=models.TextField(help_text='Text result of the checker', verbose_name='Log'),
        ),
        migrations.AlterField(
            model_name='checkerresult',
            name='object_id',
            field=models.PositiveIntegerField(verbose_name='Object Id'),
        ),
        migrations.AlterField(
            model_name='checkerresult',
            name='passed',
            field=models.BooleanField(default=True, help_text='Indicates whether the test has been passed', verbose_name='Passed'),
        ),
        migrations.AlterField(
            model_name='checkerresult',
            name='runtime',
            field=models.IntegerField(default=0, help_text='Runtime in milliseconds', verbose_name='Runtime'),
        ),
        migrations.AlterField(
            model_name='checkerresult',
            name='solution',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='solutions.Solution', verbose_name='Solution'),
        ),
        migrations.AlterField(
            model_name='checkerresultartefact',
            name='file',
            field=models.FileField(help_text='Artefact produced by a checker', max_length=500, upload_to=checker.basemodels.get_checkerresultartefact_upload_path, verbose_name='File'),
        ),
        migrations.AlterField(
            model_name='checkstylechecker',
            name='always',
            field=models.BooleanField(default=True, help_text='The test will run on submission time.', verbose_name='Always'),
        ),
        migrations.AlterField(
            model_name='checkstylechecker',
            name='configuration',
            field=checker.basemodels.CheckerFileField(help_text='XML configuration of CheckStyle. See https://github.com/checkstyle/checkstyle', max_length=500, upload_to=checker.basemodels.get_checkerfile_storage_path, verbose_name='Configuration'),
        ),
        migrations.AlterField(
            model_name='checkstylechecker',
            name='created',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Created'),
        ),
        migrations.AlterField(
            model_name='checkstylechecker',
            name='critical',
            field=models.BooleanField(default=False, help_text='If this test fails, do not display further test results.', verbose_name='Critical'),
        ),
        migrations.AlterField(
            model_name='checkstylechecker',
            name='order',
            field=models.IntegerField(help_text='Determines the order in which the checker will start. Not necessary continuously!', verbose_name='Order'),
        ),
        migrations.AlterField(
            model_name='checkstylechecker',
            name='public',
            field=models.BooleanField(default=True, help_text='Test results are displayed to the submitter.', verbose_name='Public'),
        ),
        migrations.AlterField(
            model_name='checkstylechecker',
            name='required',
            field=models.BooleanField(default=False, help_text='The test must be passed to submit the solution.', verbose_name='Required'),
        ),
        migrations.AlterField(
            model_name='checkstylechecker',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task', verbose_name='Task'),
        ),
        migrations.AlterField(
            model_name='createfilechecker',
            name='always',
            field=models.BooleanField(default=True, help_text='The test will run on submission time.', verbose_name='Always'),
        ),
        migrations.AlterField(
            model_name='createfilechecker',
            name='created',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Created'),
        ),
        migrations.AlterField(
            model_name='createfilechecker',
            name='critical',
            field=models.BooleanField(default=False, help_text='If this test fails, do not display further test results.', verbose_name='Critical'),
        ),
        migrations.AlterField(
            model_name='createfilechecker',
            name='file',
            field=checker.basemodels.CheckerFileField(help_text='The file that is copied into the sandbox', max_length=500, upload_to=checker.basemodels.get_checkerfile_storage_path, verbose_name='File'),
        ),
        migrations.AlterField(
            model_name='createfilechecker',
            name='filename',
            field=models.CharField(blank=True, help_text='What the file will be named in the sandbox. If empty, we try to guess the right filename!', max_length=500, verbose_name='Filename'),
        ),
        migrations.AlterField(
            model_name='createfilechecker',
            name='include_in_solution_download',
            field=models.BooleanField(default=True, help_text='The file is (or, if it is a zipfile to be unpacked: its content) is included in "full" solution download .zip files', verbose_name='Include in solution download'),
        ),
        migrations.AlterField(
            model_name='createfilechecker',
            name='is_sourcecode',
            field=models.BooleanField(default=False, help_text='The file is (or, if it is a zipfile to be unpacked: contains) source code', verbose_name='is Sourcecode'),
        ),
        migrations.AlterField(
            model_name='createfilechecker',
            name='order',
            field=models.IntegerField(help_text='Determines the order in which the checker will start. Not necessary continuously!', verbose_name='Order'),
        ),
        migrations.AlterField(
            model_name='createfilechecker',
            name='path',
            field=models.CharField(blank=True, help_text='Subfolder in the sandbox which shall contain the file.', max_length=500, verbose_name='Path'),
        ),
        migrations.AlterField(
            model_name='createfilechecker',
            name='public',
            field=models.BooleanField(default=True, help_text='Test results are displayed to the submitter.', verbose_name='Public'),
        ),
        migrations.AlterField(
            model_name='createfilechecker',
            name='required',
            field=models.BooleanField(default=False, help_text='The test must be passed to submit the solution.', verbose_name='Required'),
        ),
        migrations.AlterField(
            model_name='createfilechecker',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task', verbose_name='Task'),
        ),
        migrations.AlterField(
            model_name='createfilechecker',
            name='unpack_zipfile',
            field=models.BooleanField(default=False, help_text='Unpack the zip file into the given subfolder. (It will be an error if the file is not a zip file; the filename is ignored.)', verbose_name='Unpack Zip File'),
        ),
        migrations.AlterField(
            model_name='cxxbuilder',
            name='_file_pattern',
            field=models.CharField(default='^[a-zA-Z0-9_]*$', help_text='Regular expression describing all source files to be passed to the compiler.', max_length=1000, verbose_name='File Pattern'),
        ),
        migrations.AlterField(
            model_name='cxxbuilder',
            name='_flags',
            field=models.CharField(blank=True, default='-Wall', help_text='Compiler flags', max_length=1000, verbose_name='Flags'),
        ),
        migrations.AlterField(
            model_name='cxxbuilder',
            name='_libs',
            field=models.CharField(blank=True, default='', help_text='Compiler libraries', max_length=1000, verbose_name='Libs'),
        ),
        migrations.AlterField(
            model_name='cxxbuilder',
            name='_main_required',
            field=models.BooleanField(default=True, help_text='Is a submission required to provide a main method?', verbose_name='Main required'),
        ),
        migrations.AlterField(
            model_name='cxxbuilder',
            name='_output_flags',
            field=models.CharField(blank=True, default='-o %s', help_text="Output flags. '%s' will be replaced by the program name.", max_length=1000, verbose_name='Output Flags'),
        ),
        migrations.AlterField(
            model_name='cxxbuilder',
            name='always',
            field=models.BooleanField(default=True, help_text='The test will run on submission time.', verbose_name='Always'),
        ),
        migrations.AlterField(
            model_name='cxxbuilder',
            name='created',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Created'),
        ),
        migrations.AlterField(
            model_name='cxxbuilder',
            name='critical',
            field=models.BooleanField(default=False, help_text='If this test fails, do not display further test results.', verbose_name='Critical'),
        ),
        migrations.AlterField(
            model_name='cxxbuilder',
            name='order',
            field=models.IntegerField(help_text='Determines the order in which the checker will start. Not necessary continuously!', verbose_name='Order'),
        ),
        migrations.AlterField(
            model_name='cxxbuilder',
            name='public',
            field=models.BooleanField(default=True, help_text='Test results are displayed to the submitter.', verbose_name='Public'),
        ),
        migrations.AlterField(
            model_name='cxxbuilder',
            name='required',
            field=models.BooleanField(default=False, help_text='The test must be passed to submit the solution.', verbose_name='Required'),
        ),
        migrations.AlterField(
            model_name='cxxbuilder',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task', verbose_name='Task'),
        ),
        migrations.AlterField(
            model_name='dejagnusetup',
            name='always',
            field=models.BooleanField(default=True, help_text='The test will run on submission time.', verbose_name='Always'),
        ),
        migrations.AlterField(
            model_name='dejagnusetup',
            name='created',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Created'),
        ),
        migrations.AlterField(
            model_name='dejagnusetup',
            name='critical',
            field=models.BooleanField(default=False, help_text='If this test fails, do not display further test results.', verbose_name='Critical'),
        ),
        migrations.AlterField(
            model_name='dejagnusetup',
            name='order',
            field=models.IntegerField(help_text='Determines the order in which the checker will start. Not necessary continuously!', verbose_name='Order'),
        ),
        migrations.AlterField(
            model_name='dejagnusetup',
            name='public',
            field=models.BooleanField(default=True, help_text='Test results are displayed to the submitter.', verbose_name='Public'),
        ),
        migrations.AlterField(
            model_name='dejagnusetup',
            name='required',
            field=models.BooleanField(default=False, help_text='The test must be passed to submit the solution.', verbose_name='Required'),
        ),
        migrations.AlterField(
            model_name='dejagnusetup',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task', verbose_name='Task'),
        ),
        migrations.AlterField(
            model_name='dejagnusetup',
            name='test_defs',
            field=checker.basemodels.CheckerFileField(help_text='Das Setup benutzt den <a href="https://www.gnu.org/software/dejagnu/">DejaGnu-Testrahmen</a>, um die Programme zu testen. Die in dieser Datei enthaltenen Definitionen gelten für alle Testfälle dieser Aufgabe. Sie werden beim Testen in die DejaGnu-Datei <samp>default.exp</samp> geschrieben. (Vergl. hier zu den Abschnitt <em>Target dependent procedures</em> im    <a href="https://www.gnu.org/software/dejagnu/" target="_blank">DejaGnu-Handbuch</a>.) Die Variablen PROGRAM und JAVA werden mit dem Programmnamen bzw. dem Pfad zur Java-Runtime ersetzt.', max_length=500, upload_to=checker.basemodels.get_checkerfile_storage_path, verbose_name='Test Defs'),
        ),
        migrations.AlterField(
            model_name='dejagnutester',
            name='always',
            field=models.BooleanField(default=True, help_text='The test will run on submission time.', verbose_name='Always'),
        ),
        migrations.AlterField(
            model_name='dejagnutester',
            name='created',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Created'),
        ),
        migrations.AlterField(
            model_name='dejagnutester',
            name='critical',
            field=models.BooleanField(default=False, help_text='If this test fails, do not display further test results.', verbose_name='Critical'),
        ),
        migrations.AlterField(
            model_name='dejagnutester',
            name='order',
            field=models.IntegerField(help_text='Determines the order in which the checker will start. Not necessary continuously!', verbose_name='Order'),
        ),
        migrations.AlterField(
            model_name='dejagnutester',
            name='public',
            field=models.BooleanField(default=True, help_text='Test results are displayed to the submitter.', verbose_name='Public'),
        ),
        migrations.AlterField(
            model_name='dejagnutester',
            name='required',
            field=models.BooleanField(default=False, help_text='The test must be passed to submit the solution.', verbose_name='Required'),
        ),
        migrations.AlterField(
            model_name='dejagnutester',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task', verbose_name='Task'),
        ),
        migrations.AlterField(
            model_name='dejagnutester',
            name='test_case',
            field=checker.basemodels.CheckerFileField(help_text='In den folgenden DejaGnu-Testfällen werden typischerweise Funktionen aufgerufen, die beim vorherigen Schritt <em>Tests einrichten</em> definiert wurden.     Siehe    auch den Abschnitt <em>How to write a test case</em> im <a target="_blank" href="https://www.gnu.org/software/dejagnu/manual/">DejaGnu-Handbuch</a>.', max_length=500, upload_to=checker.basemodels.get_checkerfile_storage_path, verbose_name='Test Case'),
        ),
        migrations.AlterField(
            model_name='diffchecker',
            name='always',
            field=models.BooleanField(default=True, help_text='The test will run on submission time.', verbose_name='Always'),
        ),
        migrations.AlterField(
            model_name='diffchecker',
            name='created',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Created'),
        ),
        migrations.AlterField(
            model_name='diffchecker',
            name='critical',
            field=models.BooleanField(default=False, help_text='If this test fails, do not display further test results.', verbose_name='Critical'),
        ),
        migrations.AlterField(
            model_name='diffchecker',
            name='input_file',
            field=checker.basemodels.CheckerFileField(blank=True, help_text='The file containing the input for the program.', max_length=500, upload_to=checker.basemodels.get_checkerfile_storage_path, verbose_name='Input File'),
        ),
        migrations.AlterField(
            model_name='diffchecker',
            name='order',
            field=models.IntegerField(help_text='Determines the order in which the checker will start. Not necessary continuously!', verbose_name='Order'),
        ),
        migrations.AlterField(
            model_name='diffchecker',
            name='output_file',
            field=checker.basemodels.CheckerFileField(blank=True, help_text='The file containing the output for the program.', max_length=500, upload_to=checker.basemodels.get_checkerfile_storage_path, verbose_name='Output File'),
        ),
        migrations.AlterField(
            model_name='diffchecker',
            name='public',
            field=models.BooleanField(default=True, help_text='Test results are displayed to the submitter.', verbose_name='Public'),
        ),
        migrations.AlterField(
            model_name='diffchecker',
            name='required',
            field=models.BooleanField(default=False, help_text='The test must be passed to submit the solution.', verbose_name='Required'),
        ),
        migrations.AlterField(
            model_name='diffchecker',
            name='shell_script',
            field=checker.basemodels.CheckerFileField(help_text='The shell script whose output for the given input file is compared to the given output file: The substrings JAVA and PROGRAM got replaced by Praktomat determined values.', max_length=500, upload_to=checker.basemodels.get_checkerfile_storage_path, verbose_name='Shell Script'),
        ),
        migrations.AlterField(
            model_name='diffchecker',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task', verbose_name='Task'),
        ),
        migrations.AlterField(
            model_name='fortranbuilder',
            name='_file_pattern',
            field=models.CharField(default='^[a-zA-Z0-9_]*$', help_text='Regular expression describing all source files to be passed to the compiler.', max_length=1000, verbose_name='File Pattern'),
        ),
        migrations.AlterField(
            model_name='fortranbuilder',
            name='_flags',
            field=models.CharField(blank=True, default='-Wall', help_text='Compiler flags', max_length=1000, verbose_name='Flags'),
        ),
        migrations.AlterField(
            model_name='fortranbuilder',
            name='_libs',
            field=models.CharField(blank=True, default='', help_text='Compiler libraries', max_length=1000, verbose_name='Libs'),
        ),
        migrations.AlterField(
            model_name='fortranbuilder',
            name='_main_required',
            field=models.BooleanField(default=True, help_text='Is a submission required to provide a main method?', verbose_name='Main required'),
        ),
        migrations.AlterField(
            model_name='fortranbuilder',
            name='_output_flags',
            field=models.CharField(blank=True, default='-o %s', help_text="Output flags. '%s' will be replaced by the program name.", max_length=1000, verbose_name='Output Flags'),
        ),
        migrations.AlterField(
            model_name='fortranbuilder',
            name='always',
            field=models.BooleanField(default=True, help_text='The test will run on submission time.', verbose_name='Always'),
        ),
        migrations.AlterField(
            model_name='fortranbuilder',
            name='created',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Created'),
        ),
        migrations.AlterField(
            model_name='fortranbuilder',
            name='critical',
            field=models.BooleanField(default=False, help_text='If this test fails, do not display further test results.', verbose_name='Critical'),
        ),
        migrations.AlterField(
            model_name='fortranbuilder',
            name='order',
            field=models.IntegerField(help_text='Determines the order in which the checker will start. Not necessary continuously!', verbose_name='Order'),
        ),
        migrations.AlterField(
            model_name='fortranbuilder',
            name='public',
            field=models.BooleanField(default=True, help_text='Test results are displayed to the submitter.', verbose_name='Public'),
        ),
        migrations.AlterField(
            model_name='fortranbuilder',
            name='required',
            field=models.BooleanField(default=False, help_text='The test must be passed to submit the solution.', verbose_name='Required'),
        ),
        migrations.AlterField(
            model_name='fortranbuilder',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task', verbose_name='Task'),
        ),
        migrations.AlterField(
            model_name='haskellbuilder',
            name='_file_pattern',
            field=models.CharField(default='^[a-zA-Z0-9_]*$', help_text='Regular expression describing all source files to be passed to the compiler.', max_length=1000, verbose_name='File Pattern'),
        ),
        migrations.AlterField(
            model_name='haskellbuilder',
            name='_flags',
            field=models.CharField(blank=True, default='-Wall', help_text='Compiler flags', max_length=1000, verbose_name='Flags'),
        ),
        migrations.AlterField(
            model_name='haskellbuilder',
            name='_libs',
            field=models.CharField(blank=True, default='', help_text='Compiler libraries', max_length=1000, verbose_name='Libs'),
        ),
        migrations.AlterField(
            model_name='haskellbuilder',
            name='_main_required',
            field=models.BooleanField(default=True, help_text='Is a submission required to provide a main method?', verbose_name='Main required'),
        ),
        migrations.AlterField(
            model_name='haskellbuilder',
            name='_output_flags',
            field=models.CharField(blank=True, default='-o %s', help_text="Output flags. '%s' will be replaced by the program name.", max_length=1000, verbose_name='Output Flags'),
        ),
        migrations.AlterField(
            model_name='haskellbuilder',
            name='always',
            field=models.BooleanField(default=True, help_text='The test will run on submission time.', verbose_name='Always'),
        ),
        migrations.AlterField(
            model_name='haskellbuilder',
            name='created',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Created'),
        ),
        migrations.AlterField(
            model_name='haskellbuilder',
            name='critical',
            field=models.BooleanField(default=False, help_text='If this test fails, do not display further test results.', verbose_name='Critical'),
        ),
        migrations.AlterField(
            model_name='haskellbuilder',
            name='order',
            field=models.IntegerField(help_text='Determines the order in which the checker will start. Not necessary continuously!', verbose_name='Order'),
        ),
        migrations.AlterField(
            model_name='haskellbuilder',
            name='public',
            field=models.BooleanField(default=True, help_text='Test results are displayed to the submitter.', verbose_name='Public'),
        ),
        migrations.AlterField(
            model_name='haskellbuilder',
            name='required',
            field=models.BooleanField(default=False, help_text='The test must be passed to submit the solution.', verbose_name='Required'),
        ),
        migrations.AlterField(
            model_name='haskellbuilder',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task', verbose_name='Task'),
        ),
        migrations.AlterField(
            model_name='haskelltestframeworkchecker',
            name='always',
            field=models.BooleanField(default=True, help_text='The test will run on submission time.', verbose_name='Always'),
        ),
        migrations.AlterField(
            model_name='haskelltestframeworkchecker',
            name='created',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Created'),
        ),
        migrations.AlterField(
            model_name='haskelltestframeworkchecker',
            name='critical',
            field=models.BooleanField(default=False, help_text='If this test fails, do not display further test results.', verbose_name='Critical'),
        ),
        migrations.AlterField(
            model_name='haskelltestframeworkchecker',
            name='file',
            field=checker.basemodels.CheckerFileField(help_text='The file that is copied into the sandbox', max_length=500, upload_to=checker.basemodels.get_checkerfile_storage_path, verbose_name='File'),
        ),
        migrations.AlterField(
            model_name='haskelltestframeworkchecker',
            name='filename',
            field=models.CharField(blank=True, help_text='What the file will be named in the sandbox. If empty, we try to guess the right filename!', max_length=500, verbose_name='Filename'),
        ),
        migrations.AlterField(
            model_name='haskelltestframeworkchecker',
            name='ignore',
            field=models.CharField(blank=True, default='', help_text='space-separated list of files to be ignored during compilation', max_length=4096, verbose_name='Ignore'),
        ),
        migrations.AlterField(
            model_name='haskelltestframeworkchecker',
            name='include_in_solution_download',
            field=models.BooleanField(default=True, help_text='The file is (or, if it is a zipfile to be unpacked: its content) is included in "full" solution download .zip files', verbose_name='Include in solution download'),
        ),
        migrations.AlterField(
            model_name='haskelltestframeworkchecker',
            name='include_testcase_in_report',
            field=models.CharField(choices=[('DL', 'Download-Link only'), ('NO', 'Do not make the testcases source available'), ('FULL', 'Also copy the source into the report')], default='DL', help_text='Make the testcases source available via the checkers result report?', max_length=4, verbose_name='Include in Report'),
        ),
        migrations.AlterField(
            model_name='haskelltestframeworkchecker',
            name='is_sourcecode',
            field=models.BooleanField(default=False, help_text='The file is (or, if it is a zipfile to be unpacked: contains) source code', verbose_name='is Sourcecode'),
        ),
        migrations.AlterField(
            model_name='haskelltestframeworkchecker',
            name='order',
            field=models.IntegerField(help_text='Determines the order in which the checker will start. Not necessary continuously!', verbose_name='Order'),
        ),
        migrations.AlterField(
            model_name='haskelltestframeworkchecker',
            name='path',
            field=models.CharField(blank=True, help_text='Subfolder in the sandbox which shall contain the file.', max_length=500, verbose_name='Path'),
        ),
        migrations.AlterField(
            model_name='haskelltestframeworkchecker',
            name='public',
            field=models.BooleanField(default=True, help_text='Test results are displayed to the submitter.', verbose_name='Public'),
        ),
        migrations.AlterField(
            model_name='haskelltestframeworkchecker',
            name='require_safe',
            field=models.BooleanField(default=True, help_text='Is a submission required to be Safe (according to GHCs Safe-Mode)?', verbose_name='Require Safe'),
        ),
        migrations.AlterField(
            model_name='haskelltestframeworkchecker',
            name='required',
            field=models.BooleanField(default=False, help_text='The test must be passed to submit the solution.', verbose_name='Required'),
        ),
        migrations.AlterField(
            model_name='haskelltestframeworkchecker',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task', verbose_name='Task'),
        ),
        migrations.AlterField(
            model_name='haskelltestframeworkchecker',
            name='test_description',
            field=models.TextField(help_text='Description of the Testcase. To be displayed on Checker Results page when checker is unfolded.', verbose_name='Test Description'),
        ),
        migrations.AlterField(
            model_name='haskelltestframeworkchecker',
            name='unpack_zipfile',
            field=models.BooleanField(default=False, help_text='Unpack the zip file into the given subfolder. (It will be an error if the file is not a zip file; the filename is ignored.)', verbose_name='Unpack Zip File'),
        ),
        migrations.AlterField(
            model_name='interfacechecker',
            name='always',
            field=models.BooleanField(default=True, help_text='The test will run on submission time.', verbose_name='Always'),
        ),
        migrations.AlterField(
            model_name='interfacechecker',
            name='created',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Created'),
        ),
        migrations.AlterField(
            model_name='interfacechecker',
            name='critical',
            field=models.BooleanField(default=False, help_text='If this test fails, do not display further test results.', verbose_name='Critical'),
        ),
        migrations.AlterField(
            model_name='interfacechecker',
            name='order',
            field=models.IntegerField(help_text='Determines the order in which the checker will start. Not necessary continuously!', verbose_name='Order'),
        ),
        migrations.AlterField(
            model_name='interfacechecker',
            name='public',
            field=models.BooleanField(default=True, help_text='Test results are displayed to the submitter.', verbose_name='Public'),
        ),
        migrations.AlterField(
            model_name='interfacechecker',
            name='required',
            field=models.BooleanField(default=False, help_text='The test must be passed to submit the solution.', verbose_name='Required'),
        ),
        migrations.AlterField(
            model_name='interfacechecker',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task', verbose_name='Task'),
        ),
        migrations.AlterField(
            model_name='isabellechecker',
            name='additional_theories',
            field=models.CharField(blank=True, help_text='Isabelle theories to be run in addition to those provided by the user (Library theories or theories uploaded using the Create File Checker). Do not include the file extensions. Separate multiple theories by space', max_length=200, verbose_name='Additional Theories'),
        ),
        migrations.AlterField(
            model_name='isabellechecker',
            name='always',
            field=models.BooleanField(default=True, help_text='The test will run on submission time.', verbose_name='Always'),
        ),
        migrations.AlterField(
            model_name='isabellechecker',
            name='created',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Created'),
        ),
        migrations.AlterField(
            model_name='isabellechecker',
            name='critical',
            field=models.BooleanField(default=False, help_text='If this test fails, do not display further test results.', verbose_name='Critical'),
        ),
        migrations.AlterField(
            model_name='isabellechecker',
            name='logic',
            field=models.CharField(default='HOL', help_text='Default heap to use', max_length=100, verbose_name='Logic'),
        ),
        migrations.AlterField(
            model_name='isabellechecker',
            name='order',
            field=models.IntegerField(help_text='Determines the order in which the checker will start. Not necessary continuously!', verbose_name='Order'),
        ),
        migrations.AlterField(
            model_name='isabellechecker',
            name='public',
            field=models.BooleanField(default=True, help_text='Test results are displayed to the submitter.', verbose_name='Public'),
        ),
        migrations.AlterField(
            model_name='isabellechecker',
            name='required',
            field=models.BooleanField(default=False, help_text='The test must be passed to submit the solution.', verbose_name='Required'),
        ),
        migrations.AlterField(
            model_name='isabellechecker',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task', verbose_name='Task'),
        ),
        migrations.AlterField(
            model_name='javabuilder',
            name='_file_pattern',
            field=models.CharField(default='^[a-zA-Z0-9_]*$', help_text='Regular expression describing all source files to be passed to the compiler.', max_length=1000, verbose_name='File Pattern'),
        ),
        migrations.AlterField(
            model_name='javabuilder',
            name='_flags',
            field=models.CharField(blank=True, default='-Wall', help_text='Compiler flags', max_length=1000, verbose_name='Flags'),
        ),
        migrations.AlterField(
            model_name='javabuilder',
            name='_libs',
            field=models.CharField(blank=True, default='', help_text='Compiler libraries', max_length=1000, verbose_name='Libs'),
        ),
        migrations.AlterField(
            model_name='javabuilder',
            name='_main_required',
            field=models.BooleanField(default=True, help_text='Is a submission required to provide a main method?', verbose_name='Main required'),
        ),
        migrations.AlterField(
            model_name='javabuilder',
            name='_output_flags',
            field=models.CharField(blank=True, default='-o %s', help_text="Output flags. '%s' will be replaced by the program name.", max_length=1000, verbose_name='Output Flags'),
        ),
        migrations.AlterField(
            model_name='javabuilder',
            name='always',
            field=models.BooleanField(default=True, help_text='The test will run on submission time.', verbose_name='Always'),
        ),
        migrations.AlterField(
            model_name='javabuilder',
            name='created',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Created'),
        ),
        migrations.AlterField(
            model_name='javabuilder',
            name='critical',
            field=models.BooleanField(default=False, help_text='If this test fails, do not display further test results.', verbose_name='Critical'),
        ),
        migrations.AlterField(
            model_name='javabuilder',
            name='order',
            field=models.IntegerField(help_text='Determines the order in which the checker will start. Not necessary continuously!', verbose_name='Order'),
        ),
        migrations.AlterField(
            model_name='javabuilder',
            name='public',
            field=models.BooleanField(default=True, help_text='Test results are displayed to the submitter.', verbose_name='Public'),
        ),
        migrations.AlterField(
            model_name='javabuilder',
            name='required',
            field=models.BooleanField(default=False, help_text='The test must be passed to submit the solution.', verbose_name='Required'),
        ),
        migrations.AlterField(
            model_name='javabuilder',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task', verbose_name='Task'),
        ),
        migrations.AlterField(
            model_name='javachecker',
            name='always',
            field=models.BooleanField(default=True, help_text='The test will run on submission time.', verbose_name='Always'),
        ),
        migrations.AlterField(
            model_name='javachecker',
            name='class_name',
            field=models.CharField(help_text='The fully qualified name of the test case class (without .class)', max_length=100, verbose_name='Class name'),
        ),
        migrations.AlterField(
            model_name='javachecker',
            name='created',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Created'),
        ),
        migrations.AlterField(
            model_name='javachecker',
            name='critical',
            field=models.BooleanField(default=False, help_text='If this test fails, do not display further test results.', verbose_name='Critical'),
        ),
        migrations.AlterField(
            model_name='javachecker',
            name='order',
            field=models.IntegerField(help_text='Determines the order in which the checker will start. Not necessary continuously!', verbose_name='Order'),
        ),
        migrations.AlterField(
            model_name='javachecker',
            name='public',
            field=models.BooleanField(default=True, help_text='Test results are displayed to the submitter.', verbose_name='Public'),
        ),
        migrations.AlterField(
            model_name='javachecker',
            name='required',
            field=models.BooleanField(default=False, help_text='The test must be passed to submit the solution.', verbose_name='Required'),
        ),
        migrations.AlterField(
            model_name='javachecker',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task', verbose_name='Task'),
        ),
        migrations.AlterField(
            model_name='javachecker',
            name='test_description',
            field=models.TextField(help_text='Description of the Testcase. To be displayed on Checker Results page when checker is unfolded.', verbose_name='Test Description'),
        ),
        migrations.AlterField(
            model_name='javagccbuilder',
            name='_file_pattern',
            field=models.CharField(default='^[a-zA-Z0-9_]*$', help_text='Regular expression describing all source files to be passed to the compiler.', max_length=1000, verbose_name='File Pattern'),
        ),
        migrations.AlterField(
            model_name='javagccbuilder',
            name='_flags',
            field=models.CharField(blank=True, default='-Wall', help_text='Compiler flags', max_length=1000, verbose_name='Flags'),
        ),
        migrations.AlterField(
            model_name='javagccbuilder',
            name='_libs',
            field=models.CharField(blank=True, default='', help_text='Compiler libraries', max_length=1000, verbose_name='Libs'),
        ),
        migrations.AlterField(
            model_name='javagccbuilder',
            name='_main_required',
            field=models.BooleanField(default=True, help_text='Is a submission required to provide a main method?', verbose_name='Main required'),
        ),
        migrations.AlterField(
            model_name='javagccbuilder',
            name='_output_flags',
            field=models.CharField(blank=True, default='-o %s', help_text="Output flags. '%s' will be replaced by the program name.", max_length=1000, verbose_name='Output Flags'),
        ),
        migrations.AlterField(
            model_name='javagccbuilder',
            name='always',
            field=models.BooleanField(default=True, help_text='The test will run on submission time.', verbose_name='Always'),
        ),
        migrations.AlterField(
            model_name='javagccbuilder',
            name='created',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Created'),
        ),
        migrations.AlterField(
            model_name='javagccbuilder',
            name='critical',
            field=models.BooleanField(default=False, help_text='If this test fails, do not display further test results.', verbose_name='Critical'),
        ),
        migrations.AlterField(
            model_name='javagccbuilder',
            name='order',
            field=models.IntegerField(help_text='Determines the order in which the checker will start. Not necessary continuously!', verbose_name='Order'),
        ),
        migrations.AlterField(
            model_name='javagccbuilder',
            name='public',
            field=models.BooleanField(default=True, help_text='Test results are displayed to the submitter.', verbose_name='Public'),
        ),
        migrations.AlterField(
            model_name='javagccbuilder',
            name='required',
            field=models.BooleanField(default=False, help_text='The test must be passed to submit the solution.', verbose_name='Required'),
        ),
        migrations.AlterField(
            model_name='javagccbuilder',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task', verbose_name='Task'),
        ),
        migrations.AlterField(
            model_name='junitchecker',
            name='always',
            field=models.BooleanField(default=True, help_text='The test will run on submission time.', verbose_name='Always'),
        ),
        migrations.AlterField(
            model_name='junitchecker',
            name='class_name',
            field=models.CharField(help_text='The fully qualified name of the test case class (without .class)', max_length=100, verbose_name='Class name'),
        ),
        migrations.AlterField(
            model_name='junitchecker',
            name='created',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Created'),
        ),
        migrations.AlterField(
            model_name='junitchecker',
            name='critical',
            field=models.BooleanField(default=False, help_text='If this test fails, do not display further test results.', verbose_name='Critical'),
        ),
        migrations.AlterField(
            model_name='junitchecker',
            name='ignore',
            field=models.CharField(blank=True, default='', help_text='space-separated list of files to be ignored during compilation, i.e.: these files will not be compiled.', max_length=4096, verbose_name='ignore'),
        ),
        migrations.AlterField(
            model_name='junitchecker',
            name='junit_version',
            field=models.CharField(choices=[('junit4', 'JUnit 4'), ('junit3', 'JUnit 3')], default='junit3', max_length=16, verbose_name='JUnit Version'),
        ),
        migrations.AlterField(
            model_name='junitchecker',
            name='order',
            field=models.IntegerField(help_text='Determines the order in which the checker will start. Not necessary continuously!', verbose_name='Order'),
        ),
        migrations.AlterField(
            model_name='junitchecker',
            name='public',
            field=models.BooleanField(default=True, help_text='Test results are displayed to the submitter.', verbose_name='Public'),
        ),
        migrations.AlterField(
            model_name='junitchecker',
            name='required',
            field=models.BooleanField(default=False, help_text='The test must be passed to submit the solution.', verbose_name='Required'),
        ),
        migrations.AlterField(
            model_name='junitchecker',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task', verbose_name='Task'),
        ),
        migrations.AlterField(
            model_name='junitchecker',
            name='test_description',
            field=models.TextField(help_text='Description of the Testcase. To be displayed on Checker Results page when checker is  unfolded.', verbose_name='Test Description'),
        ),
        migrations.AlterField(
            model_name='keepfilechecker',
            name='always',
            field=models.BooleanField(default=True, help_text='The test will run on submission time.', verbose_name='Always'),
        ),
        migrations.AlterField(
            model_name='keepfilechecker',
            name='created',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Created'),
        ),
        migrations.AlterField(
            model_name='keepfilechecker',
            name='critical',
            field=models.BooleanField(default=False, help_text='If this test fails, do not display further test results.', verbose_name='Critical'),
        ),
        migrations.AlterField(
            model_name='keepfilechecker',
            name='filename',
            field=models.CharField(blank=True, help_text='The name of the file to preserve (e.g. out.txt)', max_length=500, verbose_name='Filename'),
        ),
        migrations.AlterField(
            model_name='keepfilechecker',
            name='order',
            field=models.IntegerField(help_text='Determines the order in which the checker will start. Not necessary continuously!', verbose_name='Order'),
        ),
        migrations.AlterField(
            model_name='keepfilechecker',
            name='public',
            field=models.BooleanField(default=True, help_text='Test results are displayed to the submitter.', verbose_name='Public'),
        ),
        migrations.AlterField(
            model_name='keepfilechecker',
            name='required',
            field=models.BooleanField(default=False, help_text='The test must be passed to submit the solution.', verbose_name='Required'),
        ),
        migrations.AlterField(
            model_name='keepfilechecker',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task', verbose_name='Task'),
        ),
        migrations.AlterField(
            model_name='linecounter',
            name='always',
            field=models.BooleanField(default=True, help_text='The test will run on submission time.', verbose_name='Always'),
        ),
        migrations.AlterField(
            model_name='linecounter',
            name='created',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Created'),
        ),
        migrations.AlterField(
            model_name='linecounter',
            name='critical',
            field=models.BooleanField(default=False, help_text='If this test fails, do not display further test results.', verbose_name='Critical'),
        ),
        migrations.AlterField(
            model_name='linecounter',
            name='order',
            field=models.IntegerField(help_text='Determines the order in which the checker will start. Not necessary continuously!', verbose_name='Order'),
        ),
        migrations.AlterField(
            model_name='linecounter',
            name='public',
            field=models.BooleanField(default=True, help_text='Test results are displayed to the submitter.', verbose_name='Public'),
        ),
        migrations.AlterField(
            model_name='linecounter',
            name='required',
            field=models.BooleanField(default=False, help_text='The test must be passed to submit the solution.', verbose_name='Required'),
        ),
        migrations.AlterField(
            model_name='linecounter',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task', verbose_name='Task'),
        ),
        migrations.AlterField(
            model_name='linewidthchecker',
            name='always',
            field=models.BooleanField(default=True, help_text='The test will run on submission time.', verbose_name='Always'),
        ),
        migrations.AlterField(
            model_name='linewidthchecker',
            name='created',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Created'),
        ),
        migrations.AlterField(
            model_name='linewidthchecker',
            name='critical',
            field=models.BooleanField(default=False, help_text='If this test fails, do not display further test results.', verbose_name='Critical'),
        ),
        migrations.AlterField(
            model_name='linewidthchecker',
            name='exclude',
            field=models.CharField(blank=True, default='.*\\.txt$', help_text='Regular expression describing included filenames, which shall be excluded. Case insensitive. Blank: use all files.', max_length=100, verbose_name='exclude'),
        ),
        migrations.AlterField(
            model_name='linewidthchecker',
            name='include',
            field=models.CharField(blank=True, default='.*', help_text='Regular expression describing the filenames to be checked. Case insensitive. Blank: use all files.', max_length=100, verbose_name='include'),
        ),
        migrations.AlterField(
            model_name='linewidthchecker',
            name='max_line_length',
            field=models.IntegerField(default=120, help_text='The maximum length of a line of code.', verbose_name='Max line length'),
        ),
        migrations.AlterField(
            model_name='linewidthchecker',
            name='order',
            field=models.IntegerField(help_text='Determines the order in which the checker will start. Not necessary continuously!', verbose_name='Order'),
        ),
        migrations.AlterField(
            model_name='linewidthchecker',
            name='public',
            field=models.BooleanField(default=True, help_text='Test results are displayed to the submitter.', verbose_name='Public'),
        ),
        migrations.AlterField(
            model_name='linewidthchecker',
            name='required',
            field=models.BooleanField(default=False, help_text='The test must be passed to submit the solution.', verbose_name='Required'),
        ),
        migrations.AlterField(
            model_name='linewidthchecker',
            name='tab_width',
            field=models.IntegerField(default=4, help_text='The amount of characters a tab represents.', verbose_name='tab width'),
        ),
        migrations.AlterField(
            model_name='linewidthchecker',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task', verbose_name='Task'),
        ),
        migrations.AlterField(
            model_name='rchecker',
            name='always',
            field=models.BooleanField(default=True, help_text='The test will run on submission time.', verbose_name='Always'),
        ),
        migrations.AlterField(
            model_name='rchecker',
            name='created',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Created'),
        ),
        migrations.AlterField(
            model_name='rchecker',
            name='critical',
            field=models.BooleanField(default=False, help_text='If this test fails, do not display further test results.', verbose_name='Critical'),
        ),
        migrations.AlterField(
            model_name='rchecker',
            name='keep_plots',
            field=models.BooleanField(default=True, help_text='If the R script creates a Rplots.pdf file, keep it.', verbose_name='Keep Plots'),
        ),
        migrations.AlterField(
            model_name='rchecker',
            name='order',
            field=models.IntegerField(help_text='Determines the order in which the checker will start. Not necessary continuously!', verbose_name='Order'),
        ),
        migrations.AlterField(
            model_name='rchecker',
            name='public',
            field=models.BooleanField(default=True, help_text='Test results are displayed to the submitter.', verbose_name='Public'),
        ),
        migrations.AlterField(
            model_name='rchecker',
            name='r_script',
            field=models.CharField(blank=True, help_text='R script to execute. If left blank, it will run any *.R file, as long as there is only one.', max_length=100, verbose_name='R Script'),
        ),
        migrations.AlterField(
            model_name='rchecker',
            name='require_plots',
            field=models.BooleanField(default=False, help_text='Require the script to create an Rplots.pdf file.', verbose_name='Require Plots'),
        ),
        migrations.AlterField(
            model_name='rchecker',
            name='required',
            field=models.BooleanField(default=False, help_text='The test must be passed to submit the solution.', verbose_name='Required'),
        ),
        migrations.AlterField(
            model_name='rchecker',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task', verbose_name='Task'),
        ),
        migrations.AlterField(
            model_name='scalabuilder',
            name='_file_pattern',
            field=models.CharField(default='^[a-zA-Z0-9_]*$', help_text='Regular expression describing all source files to be passed to the compiler.', max_length=1000, verbose_name='File Pattern'),
        ),
        migrations.AlterField(
            model_name='scalabuilder',
            name='_flags',
            field=models.CharField(blank=True, default='-Wall', help_text='Compiler flags', max_length=1000, verbose_name='Flags'),
        ),
        migrations.AlterField(
            model_name='scalabuilder',
            name='_libs',
            field=models.CharField(blank=True, default='', help_text='Compiler libraries', max_length=1000, verbose_name='Libs'),
        ),
        migrations.AlterField(
            model_name='scalabuilder',
            name='_main_required',
            field=models.BooleanField(default=True, help_text='Is a submission required to provide a main method?', verbose_name='Main required'),
        ),
        migrations.AlterField(
            model_name='scalabuilder',
            name='_output_flags',
            field=models.CharField(blank=True, default='-o %s', help_text="Output flags. '%s' will be replaced by the program name.", max_length=1000, verbose_name='Output Flags'),
        ),
        migrations.AlterField(
            model_name='scalabuilder',
            name='always',
            field=models.BooleanField(default=True, help_text='The test will run on submission time.', verbose_name='Always'),
        ),
        migrations.AlterField(
            model_name='scalabuilder',
            name='created',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Created'),
        ),
        migrations.AlterField(
            model_name='scalabuilder',
            name='critical',
            field=models.BooleanField(default=False, help_text='If this test fails, do not display further test results.', verbose_name='Critical'),
        ),
        migrations.AlterField(
            model_name='scalabuilder',
            name='order',
            field=models.IntegerField(help_text='Determines the order in which the checker will start. Not necessary continuously!', verbose_name='Order'),
        ),
        migrations.AlterField(
            model_name='scalabuilder',
            name='public',
            field=models.BooleanField(default=True, help_text='Test results are displayed to the submitter.', verbose_name='Public'),
        ),
        migrations.AlterField(
            model_name='scalabuilder',
            name='required',
            field=models.BooleanField(default=False, help_text='The test must be passed to submit the solution.', verbose_name='Required'),
        ),
        migrations.AlterField(
            model_name='scalabuilder',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task', verbose_name='Task'),
        ),
        migrations.AlterField(
            model_name='scriptchecker',
            name='always',
            field=models.BooleanField(default=True, help_text='The test will run on submission time.', verbose_name='Always'),
        ),
        migrations.AlterField(
            model_name='scriptchecker',
            name='created',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Created'),
        ),
        migrations.AlterField(
            model_name='scriptchecker',
            name='critical',
            field=models.BooleanField(default=False, help_text='If this test fails, do not display further test results.', verbose_name='Critical'),
        ),
        migrations.AlterField(
            model_name='scriptchecker',
            name='filename',
            field=models.CharField(blank=True, help_text='What the file will be named in the sandbox. If empty, we try to guess the right filename!', max_length=500, verbose_name='filename'),
        ),
        migrations.AlterField(
            model_name='scriptchecker',
            name='order',
            field=models.IntegerField(help_text='Determines the order in which the checker will start. Not necessary continuously!', verbose_name='Order'),
        ),
        migrations.AlterField(
            model_name='scriptchecker',
            name='public',
            field=models.BooleanField(default=True, help_text='Test results are displayed to the submitter.', verbose_name='Public'),
        ),
        migrations.AlterField(
            model_name='scriptchecker',
            name='remove',
            field=models.CharField(blank=True, help_text='Regular expression describing passages to be removed from the output.', max_length=5000, verbose_name='Remove'),
        ),
        migrations.AlterField(
            model_name='scriptchecker',
            name='required',
            field=models.BooleanField(default=False, help_text='The test must be passed to submit the solution.', verbose_name='Required'),
        ),
        migrations.AlterField(
            model_name='scriptchecker',
            name='returns_html',
            field=models.BooleanField(default=False, help_text="If the script doesn't return HTML it will be enclosed in &lt; pre &gt; tags.", verbose_name='Returns HTML'),
        ),
        migrations.AlterField(
            model_name='scriptchecker',
            name='shell_script',
            field=checker.basemodels.CheckerFileField(help_text='A script (e.g. a shell script) to run. Its output will be displayed to the user (if public), the checker will succeed if it returns an exit code of 0. The environment will contain the variables JAVA and PROGRAM.', max_length=500, upload_to=checker.basemodels.get_checkerfile_storage_path, verbose_name='Shell Script'),
        ),
        migrations.AlterField(
            model_name='scriptchecker',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task', verbose_name='Task'),
        ),
        migrations.AlterField(
            model_name='textchecker',
            name='always',
            field=models.BooleanField(default=True, help_text='The test will run on submission time.', verbose_name='Always'),
        ),
        migrations.AlterField(
            model_name='textchecker',
            name='created',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Created'),
        ),
        migrations.AlterField(
            model_name='textchecker',
            name='critical',
            field=models.BooleanField(default=False, help_text='If this test fails, do not display further test results.', verbose_name='Critical'),
        ),
        migrations.AlterField(
            model_name='textchecker',
            name='order',
            field=models.IntegerField(help_text='Determines the order in which the checker will start. Not necessary continuously!', verbose_name='Order'),
        ),
        migrations.AlterField(
            model_name='textchecker',
            name='public',
            field=models.BooleanField(default=True, help_text='Test results are displayed to the submitter.', verbose_name='Public'),
        ),
        migrations.AlterField(
            model_name='textchecker',
            name='required',
            field=models.BooleanField(default=False, help_text='The test must be passed to submit the solution.', verbose_name='Required'),
        ),
        migrations.AlterField(
            model_name='textchecker',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task', verbose_name='Task'),
        ),
    ]
